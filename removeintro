for i in *.mp4
do 
	EndOfIntroSeconds=$(bw_plex ffmpeg-process "$i")
	EndOfIntroSecondsCheck=$(bw_plex ffmpeg-process "$i" 2>&1 | grep final_video)
	EndOfIntroSecondsCheckArray=($(echo ${EndOfIntroSecondsCheck/*final_video/} | tr -d "[],'"))
	NumOfElements=${#EndOfIntroSecondsCheckArray[@]}
	SupposedEndBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-3]}
	SupposedEndBasedOnVideoArray=($(echo $SupposedEndBasedOnVideo | tr ":" "\n"))
	SupposedBeginningBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-6]}
	SupposedBeginningBasedOnVideoArray=($(echo $SupposedBeginningBasedOnVideo | tr ":" "\n"))
	
	if (( SupposedBeginningBasedOnVideoArray[0] > SupposedEndBasedOnVideoArray[0] ))
	then
			SupposedEndBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-2]}
			SupposedEndBasedOnVideoArray=($(echo $SupposedEndBasedOnVideo | tr ":" "\n"))
	fi
	
	if (( SupposedBeginningBasedOnVideoArray[0] == 0 ));
	then
		SupposedBeginningBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-5]}
		SupposedBeginningBasedOnVideoArray=($(echo $SupposedBeginningBasedOnVideo | tr ":" "\n"))
	fi
	
	SupposedBeginningBasedOnVideoSeconds=$(echo ${SupposedBeginningBasedOnVideoArray[0]}*60+${SupposedBeginningBasedOnVideoArray[1]} | bc -l)
	SupposedEndBasedOnVideoArraySeconds=$(echo ${SupposedEndBasedOnVideoArray[0]}*60+${SupposedEndBasedOnVideoArray[1]} | bc -l)
	
	IntroLengthCheck=$(echo $SupposedEndBasedOnVideoArraySeconds - $SupposedBeginningBasedOnVideoSeconds | bc -l)
	
	if (( IntroLengthCheck == 60 )) || (( IntroLengthCheck == 59 )) || (( IntroLengthCheck == 58 )) || (( IntroLengthCheck == 57 ))
	then
		IntegerEndIntroSeconds=$SupposedEndBasedOnVideoArraySeconds
	else
			#EndOfIntroSeconds=$EndOfIntroSeconds+0.5
		if (( IntroLengthCheck > 60 ))
		then
			NumOfElements=$( echo ${#EndOfIntroSecondsCheckArray[@]}-3 | bc -l)
			SupposedEndBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-3]}
			SupposedEndBasedOnVideoArray=($(echo $SupposedEndBasedOnVideo | tr ":" "\n"))
			SupposedBeginningBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-6]}
			SupposedBeginningBasedOnVideoArray=($(echo $SupposedBeginningBasedOnVideo | tr ":" "\n"))
			
			if (( SupposedBeginningBasedOnVideoArray[0] > SupposedEndBasedOnVideoArray[0] ))
			then
					SupposedEndBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-2]}
					SupposedEndBasedOnVideoArray=($(echo $SupposedEndBasedOnVideo | tr ":" "\n"))
			fi
			
			if (( SupposedBeginningBasedOnVideoArray[0] == 0 ));
			then
				SupposedBeginningBasedOnVideo=${EndOfIntroSecondsCheckArray[NumOfElements-5]}
				SupposedBeginningBasedOnVideoArray=($(echo $SupposedBeginningBasedOnVideo | tr ":" "\n"))
			fi
			
			SupposedBeginningBasedOnVideoSeconds=$(echo ${SupposedBeginningBasedOnVideoArray[0]}*60+${SupposedBeginningBasedOnVideoArray[1]} | bc -l)
			SupposedEndBasedOnVideoArraySeconds=$(echo ${SupposedEndBasedOnVideoArray[0]}*60+${SupposedEndBasedOnVideoArray[1]} | bc -l)
			
			IntroLengthCheck=$(echo $SupposedEndBasedOnVideoArraySeconds - $SupposedBeginningBasedOnVideoSeconds | bc -l)
			if (( IntroLengthCheck == 60 )) || (( IntroLengthCheck == 59 )) || (( IntroLengthCheck == 58 )) || (( IntroLengthCheck == 57 ))
			then
				IntegerEndIntroSeconds=$SupposedEndBasedOnVideoArraySeconds
			else
				EndOfIntroSeconds=$(echo "$EndOfIntroSeconds" | bc -l)
				IntegerEndIntroSeconds=$(printf "%.0f\n" $(echo "$EndOfIntroSeconds" | bc -l))
			fi
		else
			EndOfIntroSeconds=$(echo "$EndOfIntroSeconds" | bc -l)
			IntegerEndIntroSeconds=$(printf "%.0f\n" $(echo "$EndOfIntroSeconds" | bc -l))
		fi

	fi
	
	IntegerBeginIntroSeconds=$IntegerEndIntroSeconds-59
	IntegerBeginIntroSeconds=$(echo "$IntegerBeginIntroSeconds" | bc -l)
	#printf "$IntegerEndIntroSeconds \n$IntegerBeginIntroSeconds" > list1
	ffmpeg -i "$i" -t $IntegerBeginIntroSeconds -c copy 1.mp4 # -ss 5 to strip the mgm lion but it causes too much loss without reencode.. was causing audio sync problems? or was that the remerge....
	ffmpeg -i "$i" -ss $IntegerEndIntroSeconds -c copy 2.mp4
	ffmpeg -safe 0 -f concat -i <(printf "file '$PWD/1.mp4'\nfile '$PWD/2.mp4'") -c copy "introremoved/$i"
	rm -rf 1.mp4 2.mp4
	echo "$i $IntegerBeginIntroSeconds $IntegerEndIntroSeconds - Title Sequence Duration : $IntroLengthCheck" >> intro_convert_record
done